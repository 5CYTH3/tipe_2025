\frametitle{Annexe}
		\begin{lstlisting}[language=ml]
let rec unify t1 t2 =
    match (t1, t2) with
    | (Func (args1, ret1), Func (args2, ret2)) when List.length args1 = List.length args2 ->
        let s1 = List.fold_left2 (fun s arg1 arg2 ->
            compose_subst s (unify (substitute s arg1) (substitute s arg2))
        ) empty_subst_set args1 args2 in
        let s2 = unify (substitute s1 ret1) (substitute s1 ret2) in
        compose_subst s2 s1
    | TVar v, t | t, TVar v -> v |-> t
    | Int, Int | Bool, Bool | Str, Str -> empty_subst_set
    | _ -> raise (TypeError "Cannot unify types")

and (|->) v t =
    (* Binding operation from a type variable to a type (or type variable) *)
    if t = TVar v then empty_subst_set
    else if occurs_check v t then raise (TypeError "Occurs check failed")
    else TypeMap.singleton v t
;;


		\end{lstlisting}
